// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WebApp.Data;

#nullable disable

namespace WebApp.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20231023210510_FinalDB")]
    partial class FinalDB
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("WebApp.Models.Annotation", b =>
                {
                    b.Property<int>("AnnotationID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("annotation_id");

                    b.Property<int>("AnnotationTypeID")
                        .HasColumnType("int")
                        .HasColumnName("annotation_type_id");

                    b.Property<int>("ClientID")
                        .HasColumnType("int")
                        .HasColumnName("client_id");

                    b.Property<string>("Description")
                        .HasMaxLength(2000)
                        .HasColumnType("varchar(2000)")
                        .HasColumnName("description");

                    b.Property<int>("SellerID")
                        .HasColumnType("int")
                        .HasColumnName("seller_id");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("title");

                    b.HasKey("AnnotationID");

                    b.HasIndex("AnnotationTypeID");

                    b.HasIndex("ClientID");

                    b.HasIndex("SellerID");

                    b.ToTable("annotation", (string)null);
                });

            modelBuilder.Entity("WebApp.Models.AnnotationType", b =>
                {
                    b.Property<int>("AnnotationTypeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("annotation_type_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("name");

                    b.HasKey("AnnotationTypeID");

                    b.ToTable("annotation_type", (string)null);
                });

            modelBuilder.Entity("WebApp.Models.ClientStatus", b =>
                {
                    b.Property<int>("ClientStatusID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("client_status_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("name");

                    b.HasKey("ClientStatusID");

                    b.ToTable("client_status", (string)null);
                });

            modelBuilder.Entity("WebApp.Models.Company", b =>
                {
                    b.Property<int>("CompanyID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("company_id");

                    b.Property<string>("Address")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("address");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("email");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("name");

                    b.HasKey("CompanyID");

                    b.ToTable("company", (string)null);
                });

            modelBuilder.Entity("WebApp.Models.Conversation", b =>
                {
                    b.Property<int>("ConversationID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("conversation_id");

                    b.Property<int>("ClientID")
                        .HasColumnType("int")
                        .HasColumnName("client_id");

                    b.Property<int>("SellerID")
                        .HasColumnType("int")
                        .HasColumnName("seller_id");

                    b.Property<DateOnly>("StartDate")
                        .HasColumnType("date")
                        .HasColumnName("start_date");

                    b.HasKey("ConversationID");

                    b.HasIndex("ClientID");

                    b.HasIndex("SellerID");

                    b.ToTable("conversation", (string)null);
                });

            modelBuilder.Entity("WebApp.Models.Event", b =>
                {
                    b.Property<int>("EventID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("event_id");

                    b.Property<int>("ClientID")
                        .HasColumnType("int")
                        .HasColumnName("client_id");

                    b.Property<DateOnly>("DateAssigned")
                        .HasColumnType("date")
                        .HasColumnName("date_assigned");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("description");

                    b.Property<int>("EventTypeID")
                        .HasColumnType("int")
                        .HasColumnName("event_type_id");

                    b.Property<int>("SellerID")
                        .HasColumnType("int")
                        .HasColumnName("seller_id");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("title");

                    b.HasKey("EventID");

                    b.HasIndex("ClientID");

                    b.HasIndex("EventTypeID");

                    b.HasIndex("SellerID");

                    b.ToTable("event", (string)null);
                });

            modelBuilder.Entity("WebApp.Models.EventType", b =>
                {
                    b.Property<int>("EventTypeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("event_type_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("name");

                    b.HasKey("EventTypeID");

                    b.ToTable("event_type", (string)null);
                });

            modelBuilder.Entity("WebApp.Models.Message", b =>
                {
                    b.Property<string>("MessageID")
                        .HasMaxLength(25)
                        .HasColumnType("varchar(25)")
                        .HasColumnName("message_id");

                    b.Property<int>("ConversationID")
                        .HasColumnType("int")
                        .HasColumnName("conversation_id");

                    b.Property<int>("MessageTypeId")
                        .HasMaxLength(2000)
                        .HasColumnType("int")
                        .HasColumnName("message_type_id");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp")
                        .HasColumnName("timestamp");

                    b.Property<string>("WhatsappID")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("varchar(25)")
                        .HasColumnName("whatsapp_id");

                    b.HasKey("MessageID");

                    b.HasIndex("ConversationID");

                    b.HasIndex("MessageTypeId");

                    b.ToTable("message", (string)null);

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("WebApp.Models.MessageType", b =>
                {
                    b.Property<int>("MessageTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("message_type_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("name");

                    b.HasKey("MessageTypeId");

                    b.ToTable("message_type", (string)null);
                });

            modelBuilder.Entity("WebApp.Models.Opportunity", b =>
                {
                    b.Property<int>("OpportunityID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("opportunity_id");

                    b.Property<int>("ClientID")
                        .HasColumnType("int")
                        .HasColumnName("client_id");

                    b.Property<DateOnly>("CreationDate")
                        .HasColumnType("date")
                        .HasColumnName("creation_date");

                    b.Property<int>("OpportunityStatusID")
                        .HasColumnType("int")
                        .HasColumnName("order_status_id");

                    b.Property<int>("SellerID")
                        .HasColumnType("int")
                        .HasColumnName("seller_id");

                    b.HasKey("OpportunityID");

                    b.HasIndex("ClientID");

                    b.HasIndex("OpportunityStatusID");

                    b.HasIndex("SellerID");

                    b.ToTable("opportunity", (string)null);
                });

            modelBuilder.Entity("WebApp.Models.OpportunityStatus", b =>
                {
                    b.Property<int>("OpportunityStatusID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("opportunity_status_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("name");

                    b.HasKey("OpportunityStatusID");

                    b.ToTable("opportunity_status", (string)null);
                });

            modelBuilder.Entity("WebApp.Models.OpportunityStatusHistory", b =>
                {
                    b.Property<int>("OpportunityStatusHistoryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("opportunity_status_history_id");

                    b.Property<string>("Comment")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("comment");

                    b.Property<int>("OpportunityID")
                        .HasColumnType("int")
                        .HasColumnName("opportunity_id");

                    b.Property<int>("OpportunityStatusID")
                        .HasColumnType("int")
                        .HasColumnName("opportunity_status_id");

                    b.Property<DateOnly>("UpdateDate")
                        .HasColumnType("date")
                        .HasColumnName("update_date");

                    b.HasKey("OpportunityStatusHistoryID");

                    b.HasIndex("OpportunityID");

                    b.HasIndex("OpportunityStatusID");

                    b.ToTable("opportunity_status_history", (string)null);
                });

            modelBuilder.Entity("WebApp.Models.Order", b =>
                {
                    b.Property<int>("OrderID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("order_id");

                    b.Property<DateOnly>("AcceptionDate")
                        .HasColumnType("date")
                        .HasColumnName("acception_date");

                    b.Property<int>("ClientID")
                        .HasColumnType("int")
                        .HasColumnName("client_id");

                    b.Property<string>("ContactName")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("contact_name");

                    b.Property<DateOnly>("CreationDate")
                        .HasColumnType("date")
                        .HasColumnName("creation_date");

                    b.Property<string>("GeographicLocation")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("geographical_location");

                    b.Property<int>("OrderStatusID")
                        .HasColumnType("int")
                        .HasColumnName("order_status_id");

                    b.Property<int>("SellerID")
                        .HasColumnType("int")
                        .HasColumnName("seller_id");

                    b.Property<string>("ShippingAddress")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("shipping_address");

                    b.HasKey("OrderID");

                    b.HasIndex("ClientID");

                    b.HasIndex("OrderStatusID");

                    b.HasIndex("SellerID");

                    b.ToTable("order", (string)null);
                });

            modelBuilder.Entity("WebApp.Models.OrderStatus", b =>
                {
                    b.Property<int>("OrderStatusID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("order_status_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("name");

                    b.HasKey("OrderStatusID");

                    b.ToTable("order_status", (string)null);
                });

            modelBuilder.Entity("WebApp.Models.OrderStatusHistory", b =>
                {
                    b.Property<int>("OrderStatusHistoryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("order_status_history_id");

                    b.Property<string>("Comment")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("comment");

                    b.Property<int>("OrderID")
                        .HasColumnType("int")
                        .HasColumnName("order_id");

                    b.Property<int>("OrderStatusID")
                        .HasColumnType("int")
                        .HasColumnName("order_status_id");

                    b.Property<DateOnly>("UpdateDate")
                        .HasColumnType("date")
                        .HasColumnName("update_date");

                    b.HasKey("OrderStatusHistoryID");

                    b.HasIndex("OrderID");

                    b.HasIndex("OrderStatusID");

                    b.ToTable("order_status_history", (string)null);
                });

            modelBuilder.Entity("WebApp.Models.Person", b =>
                {
                    b.Property<int>("PersonID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("person_id");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("email");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("name");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("phonenumber");

                    b.Property<string>("WhatsappID")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("whatsapp_id");

                    b.HasKey("PersonID");

                    b.HasIndex("WhatsappID")
                        .IsUnique();

                    b.ToTable("person", (string)null);

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("WebApp.Models.WhatsappData", b =>
                {
                    b.Property<string>("WhatsappID")
                        .HasMaxLength(25)
                        .HasColumnType("varchar(25)")
                        .HasColumnName("whatsapp_id");

                    b.Property<string>("PhonenumberCode")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("varchar(15)")
                        .HasColumnName("phonenumber_code");

                    b.Property<string>("WhatsappName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("whatsapp_name");

                    b.HasKey("WhatsappID");

                    b.ToTable("whatsapp_data", (string)null);
                });

            modelBuilder.Entity("WebApp.Models.TextMessage", b =>
                {
                    b.HasBaseType("WebApp.Models.Message");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("varchar(2000)")
                        .HasColumnName("text");

                    b.ToTable("text_message", (string)null);
                });

            modelBuilder.Entity("WebApp.Models.Client", b =>
                {
                    b.HasBaseType("WebApp.Models.Person");

                    b.Property<int>("ClientID")
                        .HasColumnType("int")
                        .HasColumnName("client_id");

                    b.Property<int>("ClientStatusID")
                        .HasColumnType("int")
                        .HasColumnName("client_status_id");

                    b.Property<int>("CompanyID")
                        .HasColumnType("int")
                        .HasColumnName("company_id");

                    b.Property<int>("SellerID")
                        .HasColumnType("int")
                        .HasColumnName("seller_id");

                    b.HasIndex("ClientStatusID");

                    b.HasIndex("CompanyID");

                    b.HasIndex("SellerID");

                    b.ToTable("client", (string)null);
                });

            modelBuilder.Entity("WebApp.Models.Seller", b =>
                {
                    b.HasBaseType("WebApp.Models.Person");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("password");

                    b.Property<int>("SellerID")
                        .HasColumnType("int")
                        .HasColumnName("seller_id");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("username");

                    b.ToTable("seller", (string)null);
                });

            modelBuilder.Entity("WebApp.Models.Annotation", b =>
                {
                    b.HasOne("WebApp.Models.AnnotationType", "AnnotationType")
                        .WithMany("Annotations")
                        .HasForeignKey("AnnotationTypeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApp.Models.Client", "Client")
                        .WithMany("Annotations")
                        .HasForeignKey("ClientID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApp.Models.Seller", "Seller")
                        .WithMany("Annotations")
                        .HasForeignKey("SellerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AnnotationType");

                    b.Navigation("Client");

                    b.Navigation("Seller");
                });

            modelBuilder.Entity("WebApp.Models.Conversation", b =>
                {
                    b.HasOne("WebApp.Models.Client", "Client")
                        .WithMany("Conversations")
                        .HasForeignKey("ClientID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApp.Models.Seller", "Seller")
                        .WithMany("Conversations")
                        .HasForeignKey("SellerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("Seller");
                });

            modelBuilder.Entity("WebApp.Models.Event", b =>
                {
                    b.HasOne("WebApp.Models.Client", "Client")
                        .WithMany("Events")
                        .HasForeignKey("ClientID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApp.Models.EventType", "EventType")
                        .WithMany("Events")
                        .HasForeignKey("EventTypeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApp.Models.Seller", "Seller")
                        .WithMany("Events")
                        .HasForeignKey("SellerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("EventType");

                    b.Navigation("Seller");
                });

            modelBuilder.Entity("WebApp.Models.Message", b =>
                {
                    b.HasOne("WebApp.Models.Conversation", "Conversation")
                        .WithMany("Messages")
                        .HasForeignKey("ConversationID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApp.Models.MessageType", "MessageType")
                        .WithMany("Messages")
                        .HasForeignKey("MessageTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Conversation");

                    b.Navigation("MessageType");
                });

            modelBuilder.Entity("WebApp.Models.Opportunity", b =>
                {
                    b.HasOne("WebApp.Models.Client", "Client")
                        .WithMany("Opportunities")
                        .HasForeignKey("ClientID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApp.Models.OpportunityStatus", "OpportunityStatus")
                        .WithMany("Opportunities")
                        .HasForeignKey("OpportunityStatusID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApp.Models.Seller", "Seller")
                        .WithMany("Opportunities")
                        .HasForeignKey("SellerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("OpportunityStatus");

                    b.Navigation("Seller");
                });

            modelBuilder.Entity("WebApp.Models.OpportunityStatusHistory", b =>
                {
                    b.HasOne("WebApp.Models.Opportunity", "Opportunity")
                        .WithMany("OpportunityStatusHistories")
                        .HasForeignKey("OpportunityID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApp.Models.OpportunityStatus", "OpportunityStatus")
                        .WithMany("OpportunityStatusHistories")
                        .HasForeignKey("OpportunityStatusID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Opportunity");

                    b.Navigation("OpportunityStatus");
                });

            modelBuilder.Entity("WebApp.Models.Order", b =>
                {
                    b.HasOne("WebApp.Models.Client", "Client")
                        .WithMany("Orders")
                        .HasForeignKey("ClientID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApp.Models.OrderStatus", "OrderStatus")
                        .WithMany("Orders")
                        .HasForeignKey("OrderStatusID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApp.Models.Seller", "Seller")
                        .WithMany("Orders")
                        .HasForeignKey("SellerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("OrderStatus");

                    b.Navigation("Seller");
                });

            modelBuilder.Entity("WebApp.Models.OrderStatusHistory", b =>
                {
                    b.HasOne("WebApp.Models.Order", "Order")
                        .WithMany("OrderStatusHistories")
                        .HasForeignKey("OrderID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApp.Models.OrderStatus", "OrderStatus")
                        .WithMany("OrderStatusHistories")
                        .HasForeignKey("OrderStatusID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("OrderStatus");
                });

            modelBuilder.Entity("WebApp.Models.Person", b =>
                {
                    b.HasOne("WebApp.Models.WhatsappData", "WhatsappData")
                        .WithOne("Person")
                        .HasForeignKey("WebApp.Models.Person", "WhatsappID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("WhatsappData");
                });

            modelBuilder.Entity("WebApp.Models.TextMessage", b =>
                {
                    b.HasOne("WebApp.Models.Message", null)
                        .WithOne()
                        .HasForeignKey("WebApp.Models.TextMessage", "MessageID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WebApp.Models.Client", b =>
                {
                    b.HasOne("WebApp.Models.ClientStatus", "ClientStatus")
                        .WithMany("Clients")
                        .HasForeignKey("ClientStatusID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApp.Models.Company", "Company")
                        .WithMany("Clients")
                        .HasForeignKey("CompanyID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApp.Models.Person", null)
                        .WithOne()
                        .HasForeignKey("WebApp.Models.Client", "PersonID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApp.Models.Seller", "Seller")
                        .WithMany("Clients")
                        .HasForeignKey("SellerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ClientStatus");

                    b.Navigation("Company");

                    b.Navigation("Seller");
                });

            modelBuilder.Entity("WebApp.Models.Seller", b =>
                {
                    b.HasOne("WebApp.Models.Person", null)
                        .WithOne()
                        .HasForeignKey("WebApp.Models.Seller", "PersonID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WebApp.Models.AnnotationType", b =>
                {
                    b.Navigation("Annotations");
                });

            modelBuilder.Entity("WebApp.Models.ClientStatus", b =>
                {
                    b.Navigation("Clients");
                });

            modelBuilder.Entity("WebApp.Models.Company", b =>
                {
                    b.Navigation("Clients");
                });

            modelBuilder.Entity("WebApp.Models.Conversation", b =>
                {
                    b.Navigation("Messages");
                });

            modelBuilder.Entity("WebApp.Models.EventType", b =>
                {
                    b.Navigation("Events");
                });

            modelBuilder.Entity("WebApp.Models.MessageType", b =>
                {
                    b.Navigation("Messages");
                });

            modelBuilder.Entity("WebApp.Models.Opportunity", b =>
                {
                    b.Navigation("OpportunityStatusHistories");
                });

            modelBuilder.Entity("WebApp.Models.OpportunityStatus", b =>
                {
                    b.Navigation("Opportunities");

                    b.Navigation("OpportunityStatusHistories");
                });

            modelBuilder.Entity("WebApp.Models.Order", b =>
                {
                    b.Navigation("OrderStatusHistories");
                });

            modelBuilder.Entity("WebApp.Models.OrderStatus", b =>
                {
                    b.Navigation("OrderStatusHistories");

                    b.Navigation("Orders");
                });

            modelBuilder.Entity("WebApp.Models.WhatsappData", b =>
                {
                    b.Navigation("Person")
                        .IsRequired();
                });

            modelBuilder.Entity("WebApp.Models.Client", b =>
                {
                    b.Navigation("Annotations");

                    b.Navigation("Conversations");

                    b.Navigation("Events");

                    b.Navigation("Opportunities");

                    b.Navigation("Orders");
                });

            modelBuilder.Entity("WebApp.Models.Seller", b =>
                {
                    b.Navigation("Annotations");

                    b.Navigation("Clients");

                    b.Navigation("Conversations");

                    b.Navigation("Events");

                    b.Navigation("Opportunities");

                    b.Navigation("Orders");
                });
#pragma warning restore 612, 618
        }
    }
}
